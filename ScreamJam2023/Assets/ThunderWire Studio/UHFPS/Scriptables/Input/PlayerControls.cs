//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.1
//     from Assets/ThunderWire Studio/UHFPS/Scriptables/Input/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""input.map.player"",
            ""id"": ""7286f3fe-4219-466e-8f26-8089355e8ebd"",
            ""actions"": [
                {
                    ""name"": ""input.action.movement"",
                    ""type"": ""Value"",
                    ""id"": ""b51b7bb5-53a7-4073-9226-d95f34314ead"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""input.action.sprint"",
                    ""type"": ""Button"",
                    ""id"": ""883c57ef-56d5-4f0d-8c3e-a962f30f59a1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""input.action.jump"",
                    ""type"": ""Button"",
                    ""id"": ""2f17f526-e679-4e4e-89df-4cfbdf2d3173"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""input.action.crouch"",
                    ""type"": ""Button"",
                    ""id"": ""04df3e28-a585-41b6-bbfd-5320e3fbe579"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""input.action.use"",
                    ""type"": ""Button"",
                    ""id"": ""935119d7-e0de-4a86-82d6-11127bf905fa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""input.action.examine"",
                    ""type"": ""Button"",
                    ""id"": ""1a028dd5-8cda-4498-9128-ec9ba6d4296e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""input.action.fire"",
                    ""type"": ""Button"",
                    ""id"": ""dca170ba-e865-4834-a8ff-0a8d76283c9d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""input.action.reload"",
                    ""type"": ""Button"",
                    ""id"": ""13ea2433-e413-4c60-8fcd-18a6a2978487"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""input.action.ads"",
                    ""type"": ""Button"",
                    ""id"": ""3e424f69-c5b1-4004-8c73-1f89cfccb7ea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""input.action.equip1"",
                    ""type"": ""Button"",
                    ""id"": ""152cf4d2-d0b4-43c8-9255-bfdc7563c7e8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""input.action.equip2"",
                    ""type"": ""Button"",
                    ""id"": ""63f6de83-4ba7-4cf7-9bcf-ebf39990d3dc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""input.action.equip3"",
                    ""type"": ""Button"",
                    ""id"": ""8f8fbf75-fc65-41d1-b449-60c4a9938423"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""input.action.equip4"",
                    ""type"": ""Button"",
                    ""id"": ""89acbc67-e4f8-4f03-aade-ee9515d46e84"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""input.action.unequip"",
                    ""type"": ""Button"",
                    ""id"": ""0ab2a7a0-2f10-47a9-9125-85e654d2491a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""input.action.look*"",
                    ""type"": ""Value"",
                    ""id"": ""d00fb054-e911-4f8d-820c-4230951af99c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""input.action.lean"",
                    ""type"": ""Value"",
                    ""id"": ""94cf1217-3c73-4301-87ed-69ce7a89169d"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""input.action.flashlight"",
                    ""type"": ""Button"",
                    ""id"": ""b21d5923-b679-4de2-b92c-1432df209a97"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""6e53d249-3869-4758-845f-2f50b0d8d1a8"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""input.action.movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""15d59094-85d1-408d-b565-724532c15263"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""input.action.movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ae984b62-1915-433f-beca-39da86ea6167"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""input.action.movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ca50f716-ea37-4950-bb93-3e24fb206cd4"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""input.action.movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""cdb9d988-93ee-4d5a-be0e-d48a01c4ab10"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""input.action.movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""6043974b-f666-48d6-be4e-f45487be797a"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""input.action.jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0f1d5935-2d96-4825-a6e5-6ef2cb11eb35"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""input.action.sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3381fe3f-7734-4c60-bffb-ad74169c338e"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""input.action.crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9366e3d5-ab57-477f-a918-fe4c155ce41d"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""input.action.use"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3dd367ef-29ef-45d4-9ee6-725e8deae5a0"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""input.action.examine"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""87d1e515-b33e-4745-b683-2b5b6a501326"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""input.action.fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""18eb83c1-e019-4d60-aa31-a2c8b64b62ff"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""input.action.reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4af1acba-a341-497f-a47b-40c05dd0f7fd"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""input.action.ads"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""31add174-973d-4e10-972c-823ca6909459"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""input.action.equip1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""90df3d7f-54c0-4bf0-b4cd-9bb60eb9186c"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""input.action.equip2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b22d3ad0-903f-4c7a-bc0e-a8d70ba1f866"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""input.action.equip3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b8db1549-4fde-4734-87f8-ed4e3176f719"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""input.action.equip4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""54226f32-b2b2-45ce-945c-ded16097ddec"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=0.5,y=0.5),ScaleVector2(x=0.1,y=0.1)"",
                    ""groups"": """",
                    ""action"": ""input.action.look*"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Lean Axis"",
                    ""id"": ""c3074b6b-0743-43d4-bdaf-2f5cccadfe99"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""input.action.lean"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""2265525a-89a6-44db-b939-4256c6b62118"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""input.action.lean"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""abfe9220-53df-47b7-aa88-7dc7400391ee"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""input.action.lean"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""2c334b59-9606-4e15-b573-6538506dd918"",
                    ""path"": ""<Keyboard>/backquote"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""input.action.unequip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e67871d1-7335-42a2-a2c1-2a17723aee34"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""input.action.flashlight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""input.map.player.ui"",
            ""id"": ""aba4e69d-0442-43ef-81d8-45c7dcef34c4"",
            ""actions"": [
                {
                    ""name"": ""input.action.pause"",
                    ""type"": ""Button"",
                    ""id"": ""a73b4a0d-58c6-4945-845c-52f923b252b9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""input.action.inventory"",
                    ""type"": ""Button"",
                    ""id"": ""dd2256ca-b262-4d3e-9407-abcdc8d38915"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""input.action.map"",
                    ""type"": ""Button"",
                    ""id"": ""e17cc77a-efb6-4028-9f15-46ea909bf93c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""input.action.inventory.rotate"",
                    ""type"": ""Button"",
                    ""id"": ""6d36ffc9-4e4f-4f31-ae51-b0f63ed56cf7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""input.action.inventory.move"",
                    ""type"": ""Button"",
                    ""id"": ""6387b579-013a-4382-bda0-28fc2ad1e725"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""input.action.inventory.select"",
                    ""type"": ""Button"",
                    ""id"": ""84379244-e40e-4d31-a4c4-96f77c4255d5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""input.action.cursor"",
                    ""type"": ""Button"",
                    ""id"": ""e3714b6c-cf9a-46f5-8aad-28c4ad52e3a9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""input.action.arrows"",
                    ""type"": ""Value"",
                    ""id"": ""b582da05-2838-4c52-a7d7-4d7258d88ca0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""66f6ffd4-73fe-4bfd-8238-af1ab9690494"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""input.action.pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c6e048e3-690a-447b-87e2-06b1d1d240e2"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""input.action.map"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""915227c1-48e9-45f5-8e55-fbeb8fa5e884"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""input.action.inventory.rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d705e44a-0f01-483c-aa16-ad2aa96cdcd7"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""input.action.inventory.move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a36559e3-9842-48da-a236-6329c3a9c36c"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""input.action.inventory.select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3701cd49-f109-4e8f-9785-c7fe9fb681b8"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""input.action.cursor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""1e0774b1-1917-4665-8c73-3e1a86b083e9"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""input.action.arrows"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b2519651-e8f7-43f6-9aed-cec80e6116b9"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""input.action.arrows"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a3172976-afbf-4da5-a403-8bdc4e817d1e"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""input.action.arrows"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""366925a2-7678-4c88-82e9-384a82de4dfe"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""input.action.arrows"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""7f129d55-a93e-424d-9bbe-2124af6898db"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""input.action.arrows"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0d92947b-ca7c-44a7-8c25-3126c61b9856"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""input.action.inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""input.map.other"",
            ""id"": ""36ac3b5e-a224-42cf-a2a4-ea273fb4a2cc"",
            ""actions"": [
                {
                    ""name"": ""input.action.mouse.point"",
                    ""type"": ""Value"",
                    ""id"": ""1003f7a2-385d-46ca-9fa4-34de601e7c1e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""input.action.mouse.delta"",
                    ""type"": ""Value"",
                    ""id"": ""640da661-f716-4d6e-bc0c-29050495c167"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""input.action.mouse.scrollwheel"",
                    ""type"": ""Value"",
                    ""id"": ""fa3b37c6-f4f2-47da-b134-0abb60ae3a14"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""input.action.leftbutton"",
                    ""type"": ""Button"",
                    ""id"": ""532adc3a-9fdb-4118-a42a-c840f9097588"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""input.action.rightbutton"",
                    ""type"": ""Button"",
                    ""id"": ""39c760b3-5364-4efc-a485-d53b20ae82c3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""input.action.screenshot"",
                    ""type"": ""Button"",
                    ""id"": ""680be763-b8bc-4e72-94d0-ea8a0927cc24"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b569b863-37c5-462f-aab6-277188ad3363"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""input.action.mouse.delta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""45a0bc54-7f3e-450c-9911-ccf300076b9b"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""input.action.mouse.scrollwheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c993dee7-123b-4a8b-8b4c-6566fafe4d2c"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""input.action.mouse.point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b949c4a4-b67a-4585-a46e-90c9ba01bfd0"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""input.action.leftbutton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d5e732fc-50e1-448e-9e71-e04376b94523"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""input.action.rightbutton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""23b9442e-6fb5-499a-9b18-e4766adb1ccd"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""input.action.screenshot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""custom"",
            ""id"": ""5aef51f6-6486-4b3a-aa98-c6a6a69cdcd9"",
            ""actions"": [
                {
                    ""name"": ""tape1"",
                    ""type"": ""Button"",
                    ""id"": ""c4d10c1d-1e0f-489b-9534-f382cdb819b1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""731e99da-8443-4084-b7fb-3a7cd3201aed"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""tape1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Cass_Player_Input"",
            ""id"": ""b7842b0b-864d-49dc-ba6c-616430b91dfb"",
            ""actions"": [
                {
                    ""name"": ""Next"",
                    ""type"": ""Button"",
                    ""id"": ""f25dd761-4f33-4ced-8b5d-dc3dd9c1df77"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Stop"",
                    ""type"": ""Button"",
                    ""id"": ""dea366be-ba61-4897-b2fd-1cc61a2ed3ce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Play"",
                    ""type"": ""Button"",
                    ""id"": ""45a94d33-4891-4c78-a945-79687b3a1323"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""69980ce2-e487-4fdb-9d1e-615b04f85058"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rewind"",
                    ""type"": ""Button"",
                    ""id"": ""fc6056d6-9cae-4e9e-bcf4-3b62362bd4e4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""14645c30-709b-45e4-94a3-b64680948bbd"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Next"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4a9617da-76cd-4dbc-94cb-0fe62197f164"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Stop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4e4b4e8c-dc2f-469f-8eff-3fee8d50e866"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Play"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""21897a38-1f79-465d-8fa9-e76f48912ae6"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6122e83e-9194-48e4-b41f-3eefd84dc7a2"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rewind"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // input.map.player
        m_inputmapplayer = asset.FindActionMap("input.map.player", throwIfNotFound: true);
        m_inputmapplayer_inputactionmovement = m_inputmapplayer.FindAction("input.action.movement", throwIfNotFound: true);
        m_inputmapplayer_inputactionsprint = m_inputmapplayer.FindAction("input.action.sprint", throwIfNotFound: true);
        m_inputmapplayer_inputactionjump = m_inputmapplayer.FindAction("input.action.jump", throwIfNotFound: true);
        m_inputmapplayer_inputactioncrouch = m_inputmapplayer.FindAction("input.action.crouch", throwIfNotFound: true);
        m_inputmapplayer_inputactionuse = m_inputmapplayer.FindAction("input.action.use", throwIfNotFound: true);
        m_inputmapplayer_inputactionexamine = m_inputmapplayer.FindAction("input.action.examine", throwIfNotFound: true);
        m_inputmapplayer_inputactionfire = m_inputmapplayer.FindAction("input.action.fire", throwIfNotFound: true);
        m_inputmapplayer_inputactionreload = m_inputmapplayer.FindAction("input.action.reload", throwIfNotFound: true);
        m_inputmapplayer_inputactionads = m_inputmapplayer.FindAction("input.action.ads", throwIfNotFound: true);
        m_inputmapplayer_inputactionequip1 = m_inputmapplayer.FindAction("input.action.equip1", throwIfNotFound: true);
        m_inputmapplayer_inputactionequip2 = m_inputmapplayer.FindAction("input.action.equip2", throwIfNotFound: true);
        m_inputmapplayer_inputactionequip3 = m_inputmapplayer.FindAction("input.action.equip3", throwIfNotFound: true);
        m_inputmapplayer_inputactionequip4 = m_inputmapplayer.FindAction("input.action.equip4", throwIfNotFound: true);
        m_inputmapplayer_inputactionunequip = m_inputmapplayer.FindAction("input.action.unequip", throwIfNotFound: true);
        m_inputmapplayer_inputactionlook = m_inputmapplayer.FindAction("input.action.look*", throwIfNotFound: true);
        m_inputmapplayer_inputactionlean = m_inputmapplayer.FindAction("input.action.lean", throwIfNotFound: true);
        m_inputmapplayer_inputactionflashlight = m_inputmapplayer.FindAction("input.action.flashlight", throwIfNotFound: true);
        // input.map.player.ui
        m_inputmapplayerui = asset.FindActionMap("input.map.player.ui", throwIfNotFound: true);
        m_inputmapplayerui_inputactionpause = m_inputmapplayerui.FindAction("input.action.pause", throwIfNotFound: true);
        m_inputmapplayerui_inputactioninventory = m_inputmapplayerui.FindAction("input.action.inventory", throwIfNotFound: true);
        m_inputmapplayerui_inputactionmap = m_inputmapplayerui.FindAction("input.action.map", throwIfNotFound: true);
        m_inputmapplayerui_inputactioninventoryrotate = m_inputmapplayerui.FindAction("input.action.inventory.rotate", throwIfNotFound: true);
        m_inputmapplayerui_inputactioninventorymove = m_inputmapplayerui.FindAction("input.action.inventory.move", throwIfNotFound: true);
        m_inputmapplayerui_inputactioninventoryselect = m_inputmapplayerui.FindAction("input.action.inventory.select", throwIfNotFound: true);
        m_inputmapplayerui_inputactioncursor = m_inputmapplayerui.FindAction("input.action.cursor", throwIfNotFound: true);
        m_inputmapplayerui_inputactionarrows = m_inputmapplayerui.FindAction("input.action.arrows", throwIfNotFound: true);
        // input.map.other
        m_inputmapother = asset.FindActionMap("input.map.other", throwIfNotFound: true);
        m_inputmapother_inputactionmousepoint = m_inputmapother.FindAction("input.action.mouse.point", throwIfNotFound: true);
        m_inputmapother_inputactionmousedelta = m_inputmapother.FindAction("input.action.mouse.delta", throwIfNotFound: true);
        m_inputmapother_inputactionmousescrollwheel = m_inputmapother.FindAction("input.action.mouse.scrollwheel", throwIfNotFound: true);
        m_inputmapother_inputactionleftbutton = m_inputmapother.FindAction("input.action.leftbutton", throwIfNotFound: true);
        m_inputmapother_inputactionrightbutton = m_inputmapother.FindAction("input.action.rightbutton", throwIfNotFound: true);
        m_inputmapother_inputactionscreenshot = m_inputmapother.FindAction("input.action.screenshot", throwIfNotFound: true);
        // custom
        m_custom = asset.FindActionMap("custom", throwIfNotFound: true);
        m_custom_tape1 = m_custom.FindAction("tape1", throwIfNotFound: true);
        // Cass_Player_Input
        m_Cass_Player_Input = asset.FindActionMap("Cass_Player_Input", throwIfNotFound: true);
        m_Cass_Player_Input_Next = m_Cass_Player_Input.FindAction("Next", throwIfNotFound: true);
        m_Cass_Player_Input_Stop = m_Cass_Player_Input.FindAction("Stop", throwIfNotFound: true);
        m_Cass_Player_Input_Play = m_Cass_Player_Input.FindAction("Play", throwIfNotFound: true);
        m_Cass_Player_Input_Pause = m_Cass_Player_Input.FindAction("Pause", throwIfNotFound: true);
        m_Cass_Player_Input_Rewind = m_Cass_Player_Input.FindAction("Rewind", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // input.map.player
    private readonly InputActionMap m_inputmapplayer;
    private List<IInputmapplayerActions> m_InputmapplayerActionsCallbackInterfaces = new List<IInputmapplayerActions>();
    private readonly InputAction m_inputmapplayer_inputactionmovement;
    private readonly InputAction m_inputmapplayer_inputactionsprint;
    private readonly InputAction m_inputmapplayer_inputactionjump;
    private readonly InputAction m_inputmapplayer_inputactioncrouch;
    private readonly InputAction m_inputmapplayer_inputactionuse;
    private readonly InputAction m_inputmapplayer_inputactionexamine;
    private readonly InputAction m_inputmapplayer_inputactionfire;
    private readonly InputAction m_inputmapplayer_inputactionreload;
    private readonly InputAction m_inputmapplayer_inputactionads;
    private readonly InputAction m_inputmapplayer_inputactionequip1;
    private readonly InputAction m_inputmapplayer_inputactionequip2;
    private readonly InputAction m_inputmapplayer_inputactionequip3;
    private readonly InputAction m_inputmapplayer_inputactionequip4;
    private readonly InputAction m_inputmapplayer_inputactionunequip;
    private readonly InputAction m_inputmapplayer_inputactionlook;
    private readonly InputAction m_inputmapplayer_inputactionlean;
    private readonly InputAction m_inputmapplayer_inputactionflashlight;
    public struct InputmapplayerActions
    {
        private @PlayerControls m_Wrapper;
        public InputmapplayerActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @inputactionmovement => m_Wrapper.m_inputmapplayer_inputactionmovement;
        public InputAction @inputactionsprint => m_Wrapper.m_inputmapplayer_inputactionsprint;
        public InputAction @inputactionjump => m_Wrapper.m_inputmapplayer_inputactionjump;
        public InputAction @inputactioncrouch => m_Wrapper.m_inputmapplayer_inputactioncrouch;
        public InputAction @inputactionuse => m_Wrapper.m_inputmapplayer_inputactionuse;
        public InputAction @inputactionexamine => m_Wrapper.m_inputmapplayer_inputactionexamine;
        public InputAction @inputactionfire => m_Wrapper.m_inputmapplayer_inputactionfire;
        public InputAction @inputactionreload => m_Wrapper.m_inputmapplayer_inputactionreload;
        public InputAction @inputactionads => m_Wrapper.m_inputmapplayer_inputactionads;
        public InputAction @inputactionequip1 => m_Wrapper.m_inputmapplayer_inputactionequip1;
        public InputAction @inputactionequip2 => m_Wrapper.m_inputmapplayer_inputactionequip2;
        public InputAction @inputactionequip3 => m_Wrapper.m_inputmapplayer_inputactionequip3;
        public InputAction @inputactionequip4 => m_Wrapper.m_inputmapplayer_inputactionequip4;
        public InputAction @inputactionunequip => m_Wrapper.m_inputmapplayer_inputactionunequip;
        public InputAction @inputactionlook => m_Wrapper.m_inputmapplayer_inputactionlook;
        public InputAction @inputactionlean => m_Wrapper.m_inputmapplayer_inputactionlean;
        public InputAction @inputactionflashlight => m_Wrapper.m_inputmapplayer_inputactionflashlight;
        public InputActionMap Get() { return m_Wrapper.m_inputmapplayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InputmapplayerActions set) { return set.Get(); }
        public void AddCallbacks(IInputmapplayerActions instance)
        {
            if (instance == null || m_Wrapper.m_InputmapplayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InputmapplayerActionsCallbackInterfaces.Add(instance);
            @inputactionmovement.started += instance.OnInputactionmovement;
            @inputactionmovement.performed += instance.OnInputactionmovement;
            @inputactionmovement.canceled += instance.OnInputactionmovement;
            @inputactionsprint.started += instance.OnInputactionsprint;
            @inputactionsprint.performed += instance.OnInputactionsprint;
            @inputactionsprint.canceled += instance.OnInputactionsprint;
            @inputactionjump.started += instance.OnInputactionjump;
            @inputactionjump.performed += instance.OnInputactionjump;
            @inputactionjump.canceled += instance.OnInputactionjump;
            @inputactioncrouch.started += instance.OnInputactioncrouch;
            @inputactioncrouch.performed += instance.OnInputactioncrouch;
            @inputactioncrouch.canceled += instance.OnInputactioncrouch;
            @inputactionuse.started += instance.OnInputactionuse;
            @inputactionuse.performed += instance.OnInputactionuse;
            @inputactionuse.canceled += instance.OnInputactionuse;
            @inputactionexamine.started += instance.OnInputactionexamine;
            @inputactionexamine.performed += instance.OnInputactionexamine;
            @inputactionexamine.canceled += instance.OnInputactionexamine;
            @inputactionfire.started += instance.OnInputactionfire;
            @inputactionfire.performed += instance.OnInputactionfire;
            @inputactionfire.canceled += instance.OnInputactionfire;
            @inputactionreload.started += instance.OnInputactionreload;
            @inputactionreload.performed += instance.OnInputactionreload;
            @inputactionreload.canceled += instance.OnInputactionreload;
            @inputactionads.started += instance.OnInputactionads;
            @inputactionads.performed += instance.OnInputactionads;
            @inputactionads.canceled += instance.OnInputactionads;
            @inputactionequip1.started += instance.OnInputactionequip1;
            @inputactionequip1.performed += instance.OnInputactionequip1;
            @inputactionequip1.canceled += instance.OnInputactionequip1;
            @inputactionequip2.started += instance.OnInputactionequip2;
            @inputactionequip2.performed += instance.OnInputactionequip2;
            @inputactionequip2.canceled += instance.OnInputactionequip2;
            @inputactionequip3.started += instance.OnInputactionequip3;
            @inputactionequip3.performed += instance.OnInputactionequip3;
            @inputactionequip3.canceled += instance.OnInputactionequip3;
            @inputactionequip4.started += instance.OnInputactionequip4;
            @inputactionequip4.performed += instance.OnInputactionequip4;
            @inputactionequip4.canceled += instance.OnInputactionequip4;
            @inputactionunequip.started += instance.OnInputactionunequip;
            @inputactionunequip.performed += instance.OnInputactionunequip;
            @inputactionunequip.canceled += instance.OnInputactionunequip;
            @inputactionlook.started += instance.OnInputactionlook;
            @inputactionlook.performed += instance.OnInputactionlook;
            @inputactionlook.canceled += instance.OnInputactionlook;
            @inputactionlean.started += instance.OnInputactionlean;
            @inputactionlean.performed += instance.OnInputactionlean;
            @inputactionlean.canceled += instance.OnInputactionlean;
            @inputactionflashlight.started += instance.OnInputactionflashlight;
            @inputactionflashlight.performed += instance.OnInputactionflashlight;
            @inputactionflashlight.canceled += instance.OnInputactionflashlight;
        }

        private void UnregisterCallbacks(IInputmapplayerActions instance)
        {
            @inputactionmovement.started -= instance.OnInputactionmovement;
            @inputactionmovement.performed -= instance.OnInputactionmovement;
            @inputactionmovement.canceled -= instance.OnInputactionmovement;
            @inputactionsprint.started -= instance.OnInputactionsprint;
            @inputactionsprint.performed -= instance.OnInputactionsprint;
            @inputactionsprint.canceled -= instance.OnInputactionsprint;
            @inputactionjump.started -= instance.OnInputactionjump;
            @inputactionjump.performed -= instance.OnInputactionjump;
            @inputactionjump.canceled -= instance.OnInputactionjump;
            @inputactioncrouch.started -= instance.OnInputactioncrouch;
            @inputactioncrouch.performed -= instance.OnInputactioncrouch;
            @inputactioncrouch.canceled -= instance.OnInputactioncrouch;
            @inputactionuse.started -= instance.OnInputactionuse;
            @inputactionuse.performed -= instance.OnInputactionuse;
            @inputactionuse.canceled -= instance.OnInputactionuse;
            @inputactionexamine.started -= instance.OnInputactionexamine;
            @inputactionexamine.performed -= instance.OnInputactionexamine;
            @inputactionexamine.canceled -= instance.OnInputactionexamine;
            @inputactionfire.started -= instance.OnInputactionfire;
            @inputactionfire.performed -= instance.OnInputactionfire;
            @inputactionfire.canceled -= instance.OnInputactionfire;
            @inputactionreload.started -= instance.OnInputactionreload;
            @inputactionreload.performed -= instance.OnInputactionreload;
            @inputactionreload.canceled -= instance.OnInputactionreload;
            @inputactionads.started -= instance.OnInputactionads;
            @inputactionads.performed -= instance.OnInputactionads;
            @inputactionads.canceled -= instance.OnInputactionads;
            @inputactionequip1.started -= instance.OnInputactionequip1;
            @inputactionequip1.performed -= instance.OnInputactionequip1;
            @inputactionequip1.canceled -= instance.OnInputactionequip1;
            @inputactionequip2.started -= instance.OnInputactionequip2;
            @inputactionequip2.performed -= instance.OnInputactionequip2;
            @inputactionequip2.canceled -= instance.OnInputactionequip2;
            @inputactionequip3.started -= instance.OnInputactionequip3;
            @inputactionequip3.performed -= instance.OnInputactionequip3;
            @inputactionequip3.canceled -= instance.OnInputactionequip3;
            @inputactionequip4.started -= instance.OnInputactionequip4;
            @inputactionequip4.performed -= instance.OnInputactionequip4;
            @inputactionequip4.canceled -= instance.OnInputactionequip4;
            @inputactionunequip.started -= instance.OnInputactionunequip;
            @inputactionunequip.performed -= instance.OnInputactionunequip;
            @inputactionunequip.canceled -= instance.OnInputactionunequip;
            @inputactionlook.started -= instance.OnInputactionlook;
            @inputactionlook.performed -= instance.OnInputactionlook;
            @inputactionlook.canceled -= instance.OnInputactionlook;
            @inputactionlean.started -= instance.OnInputactionlean;
            @inputactionlean.performed -= instance.OnInputactionlean;
            @inputactionlean.canceled -= instance.OnInputactionlean;
            @inputactionflashlight.started -= instance.OnInputactionflashlight;
            @inputactionflashlight.performed -= instance.OnInputactionflashlight;
            @inputactionflashlight.canceled -= instance.OnInputactionflashlight;
        }

        public void RemoveCallbacks(IInputmapplayerActions instance)
        {
            if (m_Wrapper.m_InputmapplayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInputmapplayerActions instance)
        {
            foreach (var item in m_Wrapper.m_InputmapplayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InputmapplayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InputmapplayerActions @inputmapplayer => new InputmapplayerActions(this);

    // input.map.player.ui
    private readonly InputActionMap m_inputmapplayerui;
    private List<IInputmapplayeruiActions> m_InputmapplayeruiActionsCallbackInterfaces = new List<IInputmapplayeruiActions>();
    private readonly InputAction m_inputmapplayerui_inputactionpause;
    private readonly InputAction m_inputmapplayerui_inputactioninventory;
    private readonly InputAction m_inputmapplayerui_inputactionmap;
    private readonly InputAction m_inputmapplayerui_inputactioninventoryrotate;
    private readonly InputAction m_inputmapplayerui_inputactioninventorymove;
    private readonly InputAction m_inputmapplayerui_inputactioninventoryselect;
    private readonly InputAction m_inputmapplayerui_inputactioncursor;
    private readonly InputAction m_inputmapplayerui_inputactionarrows;
    public struct InputmapplayeruiActions
    {
        private @PlayerControls m_Wrapper;
        public InputmapplayeruiActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @inputactionpause => m_Wrapper.m_inputmapplayerui_inputactionpause;
        public InputAction @inputactioninventory => m_Wrapper.m_inputmapplayerui_inputactioninventory;
        public InputAction @inputactionmap => m_Wrapper.m_inputmapplayerui_inputactionmap;
        public InputAction @inputactioninventoryrotate => m_Wrapper.m_inputmapplayerui_inputactioninventoryrotate;
        public InputAction @inputactioninventorymove => m_Wrapper.m_inputmapplayerui_inputactioninventorymove;
        public InputAction @inputactioninventoryselect => m_Wrapper.m_inputmapplayerui_inputactioninventoryselect;
        public InputAction @inputactioncursor => m_Wrapper.m_inputmapplayerui_inputactioncursor;
        public InputAction @inputactionarrows => m_Wrapper.m_inputmapplayerui_inputactionarrows;
        public InputActionMap Get() { return m_Wrapper.m_inputmapplayerui; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InputmapplayeruiActions set) { return set.Get(); }
        public void AddCallbacks(IInputmapplayeruiActions instance)
        {
            if (instance == null || m_Wrapper.m_InputmapplayeruiActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InputmapplayeruiActionsCallbackInterfaces.Add(instance);
            @inputactionpause.started += instance.OnInputactionpause;
            @inputactionpause.performed += instance.OnInputactionpause;
            @inputactionpause.canceled += instance.OnInputactionpause;
            @inputactioninventory.started += instance.OnInputactioninventory;
            @inputactioninventory.performed += instance.OnInputactioninventory;
            @inputactioninventory.canceled += instance.OnInputactioninventory;
            @inputactionmap.started += instance.OnInputactionmap;
            @inputactionmap.performed += instance.OnInputactionmap;
            @inputactionmap.canceled += instance.OnInputactionmap;
            @inputactioninventoryrotate.started += instance.OnInputactioninventoryrotate;
            @inputactioninventoryrotate.performed += instance.OnInputactioninventoryrotate;
            @inputactioninventoryrotate.canceled += instance.OnInputactioninventoryrotate;
            @inputactioninventorymove.started += instance.OnInputactioninventorymove;
            @inputactioninventorymove.performed += instance.OnInputactioninventorymove;
            @inputactioninventorymove.canceled += instance.OnInputactioninventorymove;
            @inputactioninventoryselect.started += instance.OnInputactioninventoryselect;
            @inputactioninventoryselect.performed += instance.OnInputactioninventoryselect;
            @inputactioninventoryselect.canceled += instance.OnInputactioninventoryselect;
            @inputactioncursor.started += instance.OnInputactioncursor;
            @inputactioncursor.performed += instance.OnInputactioncursor;
            @inputactioncursor.canceled += instance.OnInputactioncursor;
            @inputactionarrows.started += instance.OnInputactionarrows;
            @inputactionarrows.performed += instance.OnInputactionarrows;
            @inputactionarrows.canceled += instance.OnInputactionarrows;
        }

        private void UnregisterCallbacks(IInputmapplayeruiActions instance)
        {
            @inputactionpause.started -= instance.OnInputactionpause;
            @inputactionpause.performed -= instance.OnInputactionpause;
            @inputactionpause.canceled -= instance.OnInputactionpause;
            @inputactioninventory.started -= instance.OnInputactioninventory;
            @inputactioninventory.performed -= instance.OnInputactioninventory;
            @inputactioninventory.canceled -= instance.OnInputactioninventory;
            @inputactionmap.started -= instance.OnInputactionmap;
            @inputactionmap.performed -= instance.OnInputactionmap;
            @inputactionmap.canceled -= instance.OnInputactionmap;
            @inputactioninventoryrotate.started -= instance.OnInputactioninventoryrotate;
            @inputactioninventoryrotate.performed -= instance.OnInputactioninventoryrotate;
            @inputactioninventoryrotate.canceled -= instance.OnInputactioninventoryrotate;
            @inputactioninventorymove.started -= instance.OnInputactioninventorymove;
            @inputactioninventorymove.performed -= instance.OnInputactioninventorymove;
            @inputactioninventorymove.canceled -= instance.OnInputactioninventorymove;
            @inputactioninventoryselect.started -= instance.OnInputactioninventoryselect;
            @inputactioninventoryselect.performed -= instance.OnInputactioninventoryselect;
            @inputactioninventoryselect.canceled -= instance.OnInputactioninventoryselect;
            @inputactioncursor.started -= instance.OnInputactioncursor;
            @inputactioncursor.performed -= instance.OnInputactioncursor;
            @inputactioncursor.canceled -= instance.OnInputactioncursor;
            @inputactionarrows.started -= instance.OnInputactionarrows;
            @inputactionarrows.performed -= instance.OnInputactionarrows;
            @inputactionarrows.canceled -= instance.OnInputactionarrows;
        }

        public void RemoveCallbacks(IInputmapplayeruiActions instance)
        {
            if (m_Wrapper.m_InputmapplayeruiActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInputmapplayeruiActions instance)
        {
            foreach (var item in m_Wrapper.m_InputmapplayeruiActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InputmapplayeruiActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InputmapplayeruiActions @inputmapplayerui => new InputmapplayeruiActions(this);

    // input.map.other
    private readonly InputActionMap m_inputmapother;
    private List<IInputmapotherActions> m_InputmapotherActionsCallbackInterfaces = new List<IInputmapotherActions>();
    private readonly InputAction m_inputmapother_inputactionmousepoint;
    private readonly InputAction m_inputmapother_inputactionmousedelta;
    private readonly InputAction m_inputmapother_inputactionmousescrollwheel;
    private readonly InputAction m_inputmapother_inputactionleftbutton;
    private readonly InputAction m_inputmapother_inputactionrightbutton;
    private readonly InputAction m_inputmapother_inputactionscreenshot;
    public struct InputmapotherActions
    {
        private @PlayerControls m_Wrapper;
        public InputmapotherActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @inputactionmousepoint => m_Wrapper.m_inputmapother_inputactionmousepoint;
        public InputAction @inputactionmousedelta => m_Wrapper.m_inputmapother_inputactionmousedelta;
        public InputAction @inputactionmousescrollwheel => m_Wrapper.m_inputmapother_inputactionmousescrollwheel;
        public InputAction @inputactionleftbutton => m_Wrapper.m_inputmapother_inputactionleftbutton;
        public InputAction @inputactionrightbutton => m_Wrapper.m_inputmapother_inputactionrightbutton;
        public InputAction @inputactionscreenshot => m_Wrapper.m_inputmapother_inputactionscreenshot;
        public InputActionMap Get() { return m_Wrapper.m_inputmapother; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InputmapotherActions set) { return set.Get(); }
        public void AddCallbacks(IInputmapotherActions instance)
        {
            if (instance == null || m_Wrapper.m_InputmapotherActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InputmapotherActionsCallbackInterfaces.Add(instance);
            @inputactionmousepoint.started += instance.OnInputactionmousepoint;
            @inputactionmousepoint.performed += instance.OnInputactionmousepoint;
            @inputactionmousepoint.canceled += instance.OnInputactionmousepoint;
            @inputactionmousedelta.started += instance.OnInputactionmousedelta;
            @inputactionmousedelta.performed += instance.OnInputactionmousedelta;
            @inputactionmousedelta.canceled += instance.OnInputactionmousedelta;
            @inputactionmousescrollwheel.started += instance.OnInputactionmousescrollwheel;
            @inputactionmousescrollwheel.performed += instance.OnInputactionmousescrollwheel;
            @inputactionmousescrollwheel.canceled += instance.OnInputactionmousescrollwheel;
            @inputactionleftbutton.started += instance.OnInputactionleftbutton;
            @inputactionleftbutton.performed += instance.OnInputactionleftbutton;
            @inputactionleftbutton.canceled += instance.OnInputactionleftbutton;
            @inputactionrightbutton.started += instance.OnInputactionrightbutton;
            @inputactionrightbutton.performed += instance.OnInputactionrightbutton;
            @inputactionrightbutton.canceled += instance.OnInputactionrightbutton;
            @inputactionscreenshot.started += instance.OnInputactionscreenshot;
            @inputactionscreenshot.performed += instance.OnInputactionscreenshot;
            @inputactionscreenshot.canceled += instance.OnInputactionscreenshot;
        }

        private void UnregisterCallbacks(IInputmapotherActions instance)
        {
            @inputactionmousepoint.started -= instance.OnInputactionmousepoint;
            @inputactionmousepoint.performed -= instance.OnInputactionmousepoint;
            @inputactionmousepoint.canceled -= instance.OnInputactionmousepoint;
            @inputactionmousedelta.started -= instance.OnInputactionmousedelta;
            @inputactionmousedelta.performed -= instance.OnInputactionmousedelta;
            @inputactionmousedelta.canceled -= instance.OnInputactionmousedelta;
            @inputactionmousescrollwheel.started -= instance.OnInputactionmousescrollwheel;
            @inputactionmousescrollwheel.performed -= instance.OnInputactionmousescrollwheel;
            @inputactionmousescrollwheel.canceled -= instance.OnInputactionmousescrollwheel;
            @inputactionleftbutton.started -= instance.OnInputactionleftbutton;
            @inputactionleftbutton.performed -= instance.OnInputactionleftbutton;
            @inputactionleftbutton.canceled -= instance.OnInputactionleftbutton;
            @inputactionrightbutton.started -= instance.OnInputactionrightbutton;
            @inputactionrightbutton.performed -= instance.OnInputactionrightbutton;
            @inputactionrightbutton.canceled -= instance.OnInputactionrightbutton;
            @inputactionscreenshot.started -= instance.OnInputactionscreenshot;
            @inputactionscreenshot.performed -= instance.OnInputactionscreenshot;
            @inputactionscreenshot.canceled -= instance.OnInputactionscreenshot;
        }

        public void RemoveCallbacks(IInputmapotherActions instance)
        {
            if (m_Wrapper.m_InputmapotherActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInputmapotherActions instance)
        {
            foreach (var item in m_Wrapper.m_InputmapotherActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InputmapotherActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InputmapotherActions @inputmapother => new InputmapotherActions(this);

    // custom
    private readonly InputActionMap m_custom;
    private List<ICustomActions> m_CustomActionsCallbackInterfaces = new List<ICustomActions>();
    private readonly InputAction m_custom_tape1;
    public struct CustomActions
    {
        private @PlayerControls m_Wrapper;
        public CustomActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @tape1 => m_Wrapper.m_custom_tape1;
        public InputActionMap Get() { return m_Wrapper.m_custom; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CustomActions set) { return set.Get(); }
        public void AddCallbacks(ICustomActions instance)
        {
            if (instance == null || m_Wrapper.m_CustomActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CustomActionsCallbackInterfaces.Add(instance);
            @tape1.started += instance.OnTape1;
            @tape1.performed += instance.OnTape1;
            @tape1.canceled += instance.OnTape1;
        }

        private void UnregisterCallbacks(ICustomActions instance)
        {
            @tape1.started -= instance.OnTape1;
            @tape1.performed -= instance.OnTape1;
            @tape1.canceled -= instance.OnTape1;
        }

        public void RemoveCallbacks(ICustomActions instance)
        {
            if (m_Wrapper.m_CustomActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICustomActions instance)
        {
            foreach (var item in m_Wrapper.m_CustomActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CustomActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CustomActions @custom => new CustomActions(this);

    // Cass_Player_Input
    private readonly InputActionMap m_Cass_Player_Input;
    private List<ICass_Player_InputActions> m_Cass_Player_InputActionsCallbackInterfaces = new List<ICass_Player_InputActions>();
    private readonly InputAction m_Cass_Player_Input_Next;
    private readonly InputAction m_Cass_Player_Input_Stop;
    private readonly InputAction m_Cass_Player_Input_Play;
    private readonly InputAction m_Cass_Player_Input_Pause;
    private readonly InputAction m_Cass_Player_Input_Rewind;
    public struct Cass_Player_InputActions
    {
        private @PlayerControls m_Wrapper;
        public Cass_Player_InputActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Next => m_Wrapper.m_Cass_Player_Input_Next;
        public InputAction @Stop => m_Wrapper.m_Cass_Player_Input_Stop;
        public InputAction @Play => m_Wrapper.m_Cass_Player_Input_Play;
        public InputAction @Pause => m_Wrapper.m_Cass_Player_Input_Pause;
        public InputAction @Rewind => m_Wrapper.m_Cass_Player_Input_Rewind;
        public InputActionMap Get() { return m_Wrapper.m_Cass_Player_Input; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Cass_Player_InputActions set) { return set.Get(); }
        public void AddCallbacks(ICass_Player_InputActions instance)
        {
            if (instance == null || m_Wrapper.m_Cass_Player_InputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Cass_Player_InputActionsCallbackInterfaces.Add(instance);
            @Next.started += instance.OnNext;
            @Next.performed += instance.OnNext;
            @Next.canceled += instance.OnNext;
            @Stop.started += instance.OnStop;
            @Stop.performed += instance.OnStop;
            @Stop.canceled += instance.OnStop;
            @Play.started += instance.OnPlay;
            @Play.performed += instance.OnPlay;
            @Play.canceled += instance.OnPlay;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @Rewind.started += instance.OnRewind;
            @Rewind.performed += instance.OnRewind;
            @Rewind.canceled += instance.OnRewind;
        }

        private void UnregisterCallbacks(ICass_Player_InputActions instance)
        {
            @Next.started -= instance.OnNext;
            @Next.performed -= instance.OnNext;
            @Next.canceled -= instance.OnNext;
            @Stop.started -= instance.OnStop;
            @Stop.performed -= instance.OnStop;
            @Stop.canceled -= instance.OnStop;
            @Play.started -= instance.OnPlay;
            @Play.performed -= instance.OnPlay;
            @Play.canceled -= instance.OnPlay;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @Rewind.started -= instance.OnRewind;
            @Rewind.performed -= instance.OnRewind;
            @Rewind.canceled -= instance.OnRewind;
        }

        public void RemoveCallbacks(ICass_Player_InputActions instance)
        {
            if (m_Wrapper.m_Cass_Player_InputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICass_Player_InputActions instance)
        {
            foreach (var item in m_Wrapper.m_Cass_Player_InputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Cass_Player_InputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Cass_Player_InputActions @Cass_Player_Input => new Cass_Player_InputActions(this);
    public interface IInputmapplayerActions
    {
        void OnInputactionmovement(InputAction.CallbackContext context);
        void OnInputactionsprint(InputAction.CallbackContext context);
        void OnInputactionjump(InputAction.CallbackContext context);
        void OnInputactioncrouch(InputAction.CallbackContext context);
        void OnInputactionuse(InputAction.CallbackContext context);
        void OnInputactionexamine(InputAction.CallbackContext context);
        void OnInputactionfire(InputAction.CallbackContext context);
        void OnInputactionreload(InputAction.CallbackContext context);
        void OnInputactionads(InputAction.CallbackContext context);
        void OnInputactionequip1(InputAction.CallbackContext context);
        void OnInputactionequip2(InputAction.CallbackContext context);
        void OnInputactionequip3(InputAction.CallbackContext context);
        void OnInputactionequip4(InputAction.CallbackContext context);
        void OnInputactionunequip(InputAction.CallbackContext context);
        void OnInputactionlook(InputAction.CallbackContext context);
        void OnInputactionlean(InputAction.CallbackContext context);
        void OnInputactionflashlight(InputAction.CallbackContext context);
    }
    public interface IInputmapplayeruiActions
    {
        void OnInputactionpause(InputAction.CallbackContext context);
        void OnInputactioninventory(InputAction.CallbackContext context);
        void OnInputactionmap(InputAction.CallbackContext context);
        void OnInputactioninventoryrotate(InputAction.CallbackContext context);
        void OnInputactioninventorymove(InputAction.CallbackContext context);
        void OnInputactioninventoryselect(InputAction.CallbackContext context);
        void OnInputactioncursor(InputAction.CallbackContext context);
        void OnInputactionarrows(InputAction.CallbackContext context);
    }
    public interface IInputmapotherActions
    {
        void OnInputactionmousepoint(InputAction.CallbackContext context);
        void OnInputactionmousedelta(InputAction.CallbackContext context);
        void OnInputactionmousescrollwheel(InputAction.CallbackContext context);
        void OnInputactionleftbutton(InputAction.CallbackContext context);
        void OnInputactionrightbutton(InputAction.CallbackContext context);
        void OnInputactionscreenshot(InputAction.CallbackContext context);
    }
    public interface ICustomActions
    {
        void OnTape1(InputAction.CallbackContext context);
    }
    public interface ICass_Player_InputActions
    {
        void OnNext(InputAction.CallbackContext context);
        void OnStop(InputAction.CallbackContext context);
        void OnPlay(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnRewind(InputAction.CallbackContext context);
    }
}
